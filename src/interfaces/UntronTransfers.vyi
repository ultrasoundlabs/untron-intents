# Structs
struct Order:
    # Address of the refund beneficiary.
    # This is the address that will receive the funds
    # if the order is not filled before the deadline.
    refundBeneficiary: address

    # Address of the token to swap from.
    # Must be a deployed ERC20 token on the deployed chain.
    token: address

    # Amount of the token to swap from.
    inputAmount: uint256

    # Tron address to receive Tron USDT.
    to: bytes20

    # Amount of the Tron USDT to receive.
    outputAmount: uint256

    # Deadline for the order.
    # If the order is not filled before the deadline,
    # the funds can be refunded to the refundBeneficiary.
    deadline: uint256

    # Address that will receive a portion of the input tokens
    referrer: address

    # How much of the input tokens will be sent to the referrer.
    # The referrer will receive a portion of the input tokens
    # as compensation for bringing the user (refundBeneficiary) to the platform.
    # The referrer fee is deducted from the input amount.
    referrerFee: uint256

# Events

event OrderCreated:
    orderId: bytes32
    refundBeneficiary: address
    token: address
    inputAmount: uint256
    to: bytes20
    outputAmount: uint256
    deadline: uint256
    referrer: address
    referrerFee: uint256
event OrderCleared:
    orderId: bytes32
event OwnershipTransferred:
    previous_owner: address
    new_owner: address

# Functions

@external
def transfer_ownership(new_owner: address):
    ...

@view
@external
def owner() -> address:
    ...

@external
def setReferrer(user: address, referrer: address):
    ...

@external
def configure(newRelayer: address, fixedFee: uint256, percentFee: uint256, referrerFee: uint256):
    ...

@view
@external
def recommendedOutputAmount(inputAmount: uint256) -> uint256:
    ...

@external
def cancel(orderId: bytes32):
    ...

@external
def claim(orderId: bytes32):
    ...

@external
def compactSwap(token: address, swapData: bytes32) -> bytes32:
    ...

@external
def compactUsdt(swapData: bytes32) -> bytes32:
    ...

@external
def compactUsdc(swapData: bytes32) -> bytes32:
    ...

@view
@external
def orders(arg0: bytes32) -> Order:
    ...

@view
@external
def nonces(arg0: address) -> uint256:
    ...

@view
@external
def referrers(arg0: address) -> address:
    ...

@view
@external
def referrerFee() -> uint256:
    ...

@view
@external
def trustedRelayer() -> address:
    ...